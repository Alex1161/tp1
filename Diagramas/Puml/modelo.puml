@startuml DC general
hide circles
skinparam ClassAttributeIconSize 0
hide interface fields

Class Cesar{
    -key: int
    +encode(message: const char *, result: unsigned char *): int
    +decode(message: String): String
}

Class Vigenere{
    -key: char *
    -size_key: size_t
    -stream: unsigned char *
    +encode(message: const char *, message_size: size_t, result: unsigned char *): int
    +decode(code: unsigned char *, code_size: size_t, message: char *): int
}

Class ARC4{
    -key: char *
    -size_key: size_t
    -stream: unsigned char *
    +encode(message: const char *, message_size: size_t, result: unsigned char *): int
    +decode(code: unsigned char *, code_size: size_t, message: char *): int
}

Class Encryptor{
    -nombre: char *
    -key: char *
    +encode(message: const char *, message_size: size_t, result: unsigned char *): int
    +decode(code: unsigned char *, code_size: size_t, message: char *): int
}

Class Socket{
    -fd: int
    +socket_bind_listen(service: const char *): int
    +socket_accept(peer: socket_t *): int
    +socket_connect(host: const char *, service: const char *): int
    +socket_send(buffer: const char *, length: size_t): int
    +socket_receive(buffer: char *, length: size_t): int
}

Class File_processor{
    -name: const char*
    -file: File *
    -file_size: size_t
    +file_processor_read(msg: char *): size_t
    +file_processor_write(buffer: char *, size_buffer: size_t): size_t
}

class Processor{
    +processor_process_client(server_host: const char *, server_port: const char *, file_name: const char *): int
    +processor_process_server(server_port: const char *, file_name: const char *): int
}

Class Op_vec{
    +un_char_to_bytes(element: unsigned char *, bytes: int *, size_element: size_t): size_t
    +bytes_to_un_char(bytes: int *, result: unsigned char *, size_bytes: size_t): size_t
    +align(bytes_key: int *, bytes_key_aligned: int *, size_bytes_msg: size_t, size_bytes_key: size_t): size_t
    +sum(bytes1: int *, bytes2: int *, result: int *, size: size_t): size_t
    +sub(bytes1: int *, bytes2: int *, result: int *, size: size_t): size_t
    +xor(message: const char *, key_stream: unsigned char *, result: unsigned char *, size: size_t): size_t
    +swap(s: unsigned char *, i: size_t, j: size_t): void
}

Class Clien_main{
    +main(argc: int, argv: const char **): int
}

Class Server_main{
    +main(argc: int, argv: const char **): int
}

Cesar .up.|> Encryptor
Vigenere .up.|> Encryptor
ARC4 .up.|> Encryptor
Processor *-left- File_processor
Processor -right-> Socket
Processor -down-> Encryptor
Vigenere -down-> Op_vec
ARC4 -down-> Op_vec
Clien_main --> Processor
Server_main --> Processor

@enduml
